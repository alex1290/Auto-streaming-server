{"version":3,"sources":["App.js","Live.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Row","Info","video","p","App","props","useState","UUID","setUUID","devices","setDevices","devicePeerID","adminID","setAdminID","stream","setStream","peer","setPeer","socket","useRef","useEffect","current","io","connect","ip","emit","on","id","list","startCapture","source","a","navigator","mediaDevices","getUserMedia","audio","then","getDisplayMedia","width","max","height","console","log","callPeer","newPeerArr","JSON","parse","stringify","newPeer","Peer","initiator","trickle","data","deviceId","signalData","adminPeerID","_id","userId","signal","end","filter","i","clearPeer","push","existPeerDeviceId","map","length","forEach","includes","onClick","n","key","className","Live","AdminVideo","setAdminPeerID","adminSignal","setAdminSignal","adminVideo","window","location","reload","srcObject","acceptCall","innerWidth","innerHeight","playsInline","muted","ref","autoPlay","Boolean","hostname","match","origin","ReactDOM","render","StrictMode","path","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c5f3a09.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Video = styled.video`\n  border: 1px solid blue;\n  width: 80%;\n  height: 80%;\n  margin:auto;\n`;\n\nconst Info = styled.p`\n  padding: 0 5px;\n`;\n\nfunction App(props) {\n  const [UUID, setUUID] = useState(\"\");\n  const [devices, setDevices] = useState([]);\n  const [devicePeerID, setDevicePeerID] = useState();\n\n  const [adminID, setAdminID] = useState(\"none\");\n\n  const [stream, setStream] = useState();\n  const [peer, setPeer] = useState([]);\n  const [img, setImg] = useState();\n\n  const userVideo = useRef();\n  const socket = useRef();\n\n  useEffect(() => {\n    socket.current = io.connect(props.ip);\n\n\n    socket.current.emit(\"type\", \"controller\");\n\n    socket.current.on(\"UUID\", (id) => {\n      setUUID(id);\n    })\n\n    socket.current.on(\"adminID\", (id) => {\n      setAdminID(id);\n    })\n\n    socket.current.on(\"deviceConnect\", (list) => {\n      setDevices(list);\n    })\n\n    startCapture('Desktop')\n  }, []);\n\n  const startCapture = async source => {\n    if (source === 'Camera') {\n      navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n        setStream(stream);\n      })\n    } else if (source === 'Desktop') {\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          width: {\n            max: 1280\n          },\n          height: {\n            max: 720\n          }\n        },\n        audio: false\n      }).then(stream => {\n        console.log(\"set\");\n        setStream(stream);\n      })\n    }\n  }\n  const stopCapture = () => {\n  }\n\n  function deviceReload(id) {\n    socket.current.emit(\"deviceReload\", id);\n  }\n\n  function callPeer(id) {\n    let newPeerArr = JSON.parse(JSON.stringify(peer));\n    let newPeer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    newPeer.on(\"signal\", data => {\n      socket.current.emit(\"callDevice\", { deviceId: id, signalData: data, adminPeerID: newPeer._id });\n    });\n    socket.current.on(\"connectToDevice\", ({ userId, signal }) => {\n      if (id === userId) newPeer.signal(signal);\n    });\n    socket.current.on(\"deviceDisconnect\", userId => {\n      if (id === userId) {\n        newPeer.end();\n        clearPeer(userId);\n      }\n    })\n    newPeerArr.push({\n      deviceId: id,\n      peer: newPeer\n    })\n    setPeer(newPeerArr);\n  }\n\n  function clearPeer(id) {\n    let newPeer = JSON.parse(JSON.stringify(peer)).filter(i => i.deviceId !== id);\n    setPeer(newPeer);\n  }\n\n  useEffect(() => {\n    let existPeerDeviceId = peer.map(i => i.deviceId);\n    // set pear\n    if (stream && devices.length > 0) {\n      devices.forEach(id => {\n        if (!existPeerDeviceId.includes(id)) {\n          callPeer(id);\n        }\n      })\n    }\n  }, [devices, stream])\n\n  return (\n    <Container>\n      <Row>\n        <Info>Update Ip Address : <button onClick={() => socket.current.emit('addr')}>Update</button></Info>\n      </Row>\n      <Row>\n        <Info>User Info : UUID = {UUID}</Info>\n        <Info>Admin ID : {adminID}</Info>\n      </Row>\n      <Row>\n        <Info>Capture Source :\n          {\n            stream\n              ?\n              <button onClick={() => stopCapture()}>Stop Capture</button>\n              : <>\n                <button onClick={() => startCapture(\"Camera\")}>Camera</button>\n                <button onClick={() => startCapture(\"Desktop\")}>Desktop</button>\n              </>\n          }\n        </Info>\n      </Row>\n      {\n        stream &&\n        <Row>\n          <Info>Device List :  {devices.map((id, n) => {\n            return (\n              <button key={n} onClick={() => callPeer(id)}>Call {id}</button>\n            );\n          })}\n          </Info>\n        </Row>\n      }\n      <Row>{devicePeerID}</Row>\n      <Row>{devicePeerID && <button className=\"target\" onClick={() => deviceReload(devicePeerID)}>Device Reload</button>}</Row>\n    </Container>\n  );\n}\n\nexport default App;","import React, { useEffect, useState, useRef } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\n\r\n\r\nconst Live = props => {\r\n    const [UUID, setUUID] = useState(\"\");\r\n    const [adminID, setAdminID] = useState(\"none\");\r\n    const [adminPeerID, setAdminPeerID] = useState();\r\n\r\n    const [adminSignal, setAdminSignal] = useState();\r\n\r\n    const [stream, setStream] = useState();\r\n\r\n    const adminVideo = useRef();\r\n    const socket = useRef();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        socket.current = io.connect(props.ip);\r\n\r\n        socket.current.on(\"adminSignal\", (data) => {\r\n            setAdminSignal(data.signalData);\r\n            setAdminPeerID(data.adminPeerID);\r\n            // socket.current.emit(\"devicePeerID\", peer._id);\r\n        })\r\n\r\n        socket.current.emit(\"type\", \"device\");\r\n\r\n        socket.current.on(\"UUID\", id => {\r\n            setUUID(id);\r\n        });\r\n\r\n        socket.current.on(\"adminID\", id => {\r\n            setAdminID(id);\r\n        });\r\n\r\n        socket.current.on(\"controllerDisconnect\", () => {\r\n            window.location.reload();\r\n        });\r\n\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (adminSignal) {\r\n            acceptCall(adminSignal)\r\n        }\r\n    }, [adminSignal])\r\n\r\n    function acceptCall(data) {\r\n        // let { signalData, from } = data\r\n        let peer = new Peer({\r\n            initiator: false,\r\n            trickle: false\r\n        });\r\n        peer.on(\"stream\", stream => {\r\n            console.log(\"get stream\");\r\n            console.log(stream);\r\n            adminVideo.current.srcObject = stream;\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socket.current.emit(\"acceptCall\", signal)\r\n        })\r\n\r\n        peer.on(\"close\", () => {\r\n            console.log(\"end\");\r\n            peer.end();\r\n        })\r\n        peer.signal(data);\r\n    }\r\n\r\n    let AdminVideo;\r\n    if (adminSignal) {\r\n        console.log(adminSignal);\r\n        AdminVideo = (\r\n            <video width={window.innerWidth} height={window.innerHeight} playsInline muted ref={adminVideo} autoPlay />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>User Info : UUID = {UUID} </p>\r\n            <p>Admin ID : {adminID}</p>\r\n            <p>Admin Peer ID : {adminPeerID}</p>\r\n            {\r\n                adminSignal && (\r\n                    <div className=\"video\">\r\n                        {AdminVideo}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Live;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Live from './Live';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nconst ip = window.location.origin\n// const ip = \"http://192.168.1.218:3003\"\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/live\">\n          <Live ip={ip} />\n        </Route>\n        <Route path=\"/\">\n          <App ip={ip} />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}